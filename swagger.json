
{
  "swagger": "2.0",
  "info": {
    "version": "0.0.1",
    "title": "EACH"
  },
  "host": "127.0.0.1:4201",
  "basePath": "/each",
  "tags": [
    {
      "name": "default",
      "description": "default feature set"
    },
    {
      "name": "Museum",
      "description": "Museum feature set"
    },
    {
      "name": "Feed",
      "description": "Feed feature set"
    },
    {
      "name": "User",
      "description": "User feature set"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/version": {
      "get": {
        "tags": [
          "default"
        ],
        "summary": "Returns current project version",
        "description": "Returns current project version",
        "operationId": "getVersion",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/all": {
      "get": {
        "tags": [
          "Museum"
        ],
        "summary": "Returns list of available museums",
        "description": "Returns list of available museums",
        "operationId": "getAllMuseums",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
        "/add": {
      "post": {
        "tags": [
          "Museum"
        ],
        "summary": "Add a new museum",
        "description": "",
        "operationId": "addNewMuseum",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_museum",
            "in": "body",
            "description": "User encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Museum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Name already taken"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/update": {
      "put": {
        "tags": [
          "Museum"
        ],
        "summary": "Update existing museum info",
        "description": "",
        "operationId": "updateMuseum",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_museum",
            "in": "body",
            "description": "User encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Museum"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Museum not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/museum/{Id}": {
      "get": {
        "tags": [
          "Museum"
        ],
        "summary": "Find museum by ID",
        "description": "Returns a museum name",
        "operationId": "getMuseum",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "ID of museum to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Museum"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Museum not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Museum"
        ],
        "summary": "Remove museum",
        "description": "",
        "operationId": "deleteMuseum",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Museum id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hard",
            "in": "query",
            "description": "Hard-delete (no undo)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Museum not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/feed": {
      "get": {
        "tags": [
          "Feed"
        ],
        "summary": "Returns feed mockup",
        "description": "Returns feed mockup",
        "operationId": "getFeedMockup",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "post": {
        "tags": [
          "Feed"
        ],
        "summary": "Add a new feed",
        "description": "Add a new feed",
        "operationId": "addFeed",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_feed",
            "in": "body",
            "description": "Feed encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Name already taken"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "put": {
        "tags": [
          "Feed"
        ],
        "summary": "Update existing catalog info",
        "description": "Update existing catalog info",
        "operationId": "updateFeed",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
       "parameters": [
          {
            "name": "new_feed",
            "in": "body",
            "description": "Feed encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Feed not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/feed/all": {
      "get": {
        "tags": [
          "Feed"
        ],
        "summary": "Get all feeds",
        "description": "Returns a list of feeds descriptions",
        "operationId": "getAllFeeds",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/feed/{feedId}": {
      "get": {
        "tags": [
          "Feed"
        ],
        "summary": "Find feed by ID",
        "description": "Returns a feed description",
        "operationId": "getFeed",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "feedId",
            "in": "path",
            "description": "ID of feed to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Feed not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Feed"
        ],
        "summary": "Remove feed",
        "description": "Remove feed",
        "operationId": "deleteFeed",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "feedId",
            "in": "path",
            "description": "Feed id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hard",
            "in": "query",
            "description": "Hard-delete (no undo)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Feed not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user",
        "description": "",
        "operationId": "createUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_user",
            "in": "body",
            "description": "User encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Name already taken"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update existing catalog info",
        "description": "",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_user",
            "in": "body",
            "description": "User encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/user/all": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all users",
        "description": "Returns a list of users descriptions",
        "operationId": "getAllUsers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/user/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get my user info",
        "description": "Returns an info of currently authorized user",
        "operationId": "getMyUser",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find user by ID",
        "description": "Returns a user description",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove user",
        "description": "",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hard",
            "in": "query",
            "description": "Hard-delete (no undo)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "auth_env": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "http://127.0.0.1:5000/oauth2/authorize",
      "tokenUrl": "http://127.0.0.1:5000/oauth2/token",
      "scopes": {
        "email": "View your email address",
        "profile": "View your basic profile info"
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string",
          "example": "Daniil"
        },
        "e_mail": {
          "type": "string",
          "example": "savchuk@itsociety.su"
        },
        "prop": {
          "type": "object",
          "properties": {
            "avatar": {
              "type": "int",
              "example": "media_id or base64 encoded string"
            },
            "private": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "created": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        },
        "updated": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        }
      }
    },
    "Museum": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "ownerid": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "test"
        },
        "desc": {
          "type": "string",
          "example": "great museum!"
        },
        "prop": {
          "type": "object",
          "properties": {
            "image": {
              "type": "int",
              "example": "media_id or base64 encoded string"
            }
          }
        },
        "created": {
          "type": "string",
          "example": "2018-07-18 20:24:00+00:00"
        },
        "updated": {
          "type": "string",
          "example": "2018-07-18 20:24:00+00:00"
        }
      }
    },
    "Feed": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "example": "The Hermitage opened an interesting exhibition"
        },
        "text": {
          "type": "string",
          "example": "It will last 2 weeks."
        },
        "prop": {
          "type": "object",
          "properties": {
            "image": {
              "type": "int",
              "example": "media_id or base64 encoded string"
            }
          }
        },
        "created": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        },
        "updated": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        }
      }
    }
  },
  "externalDocs": {
      "description": "Find out more about Swagger",
       "url": "http://swagger.io"
  }
}
