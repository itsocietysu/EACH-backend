
{
  "swagger": "2.0",
  "info": {
    "version": "0.0.1",
    "title": "EACH"
  },
  "host": "127.0.0.1:4201",
  "basePath": "/each",
  "tags": [
    {
      "name": "default",
      "description": "Default feature set"
    },
    {
      "name": "Museum",
      "description": "Museum feature set"
    },
    {
      "name": "Quest",
      "description": "Quests feature set"
    },
    {
      "name": "Feed",
      "description": "Feed feature set"
    },
    {
      "name": "OAuth",
      "description": "OAuth feature set"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/version": {
      "get": {
        "tags": [
          "default"
        ],
        "summary": "Returns current project version",
        "description": "Returns current project version",
        "operationId": "getVersion",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/all": {
      "get": {
        "tags": [
          "Museum"
        ],
        "summary": "Returns list of museums mockup",
        "description": "",
        "operationId": "getAllMuseumsMockup",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/add": {
      "post": {
        "tags": [
          "Museum"
        ],
        "summary": "Add a new museum",
        "description": "",
        "operationId": "addNewMuseum",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_museum",
            "in": "body",
            "description": "User encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Museum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Name already taken"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/update": {
      "put": {
        "tags": [
          "Museum"
        ],
        "summary": "Update existing museum info",
        "description": "",
        "operationId": "updateMuseum",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_museum",
            "in": "body",
            "description": "User encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Museum"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Museum not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/museum/all": {
      "get": {
        "tags": [
          "Museum"
        ],
        "summary": "Returns list of available museums",
        "description": "",
        "operationId": "getAllMuseums",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/museum/{Id}": {
      "get": {
        "tags": [
          "Museum"
        ],
        "summary": "Find museum by ID",
        "description": "Returns a museum name",
        "operationId": "getMuseum",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "ID of museum to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Museum"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Museum not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Museum"
        ],
        "summary": "Remove museum",
        "description": "",
        "operationId": "deleteMuseum",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Museum id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hard",
            "in": "query",
            "description": "Hard-delete (no undo)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Museum not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/game": {
      "post": {
        "tags": [
          "Quest"
        ],
        "summary": "Add a new game",
        "description": "",
        "operationId": "addNewGame",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_game",
            "in": "body",
            "description": "User encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Name already taken"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "put": {
        "tags": [
          "Quest"
        ],
        "summary": "Update existing game info",
        "description": "",
        "operationId": "updateGame",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_game",
            "in": "body",
            "description": "User encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Game"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Museum not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/game/all/{ownerId}": {
      "get": {
        "tags": [
          "Quest"
        ],
        "summary": "Return all games by ownerid",
        "description": "all games by id",
        "operationId": "getAllGamesById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "description": "ID of owner",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Games not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/game/{gameId}": {
      "get": {
        "tags": [
          "Quest"
        ],
        "summary": "Return game by id",
        "description": "all games by id",
        "operationId": "getGameById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "ID of game to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Games not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Quest"
        ],
        "summary": "Remove game",
        "description": "",
        "operationId": "deleteGame",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "description": "Game id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hard",
            "in": "query",
            "description": "Hard-delete (no undo)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Game not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/feed": {
      "get": {
        "tags": [
          "Feed"
        ],
        "summary": "Returns feed mockup",
        "description": "Returns feed mockup",
        "operationId": "getFeedMockup",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "post": {
        "tags": [
          "Feed"
        ],
        "summary": "Add a new feed",
        "description": "Add a new feed",
        "operationId": "addFeed",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_feed",
            "in": "body",
            "description": "Feed encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Name already taken"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "put": {
        "tags": [
          "Feed"
        ],
        "summary": "Update existing catalog info",
        "description": "Update existing catalog info",
        "operationId": "updateFeed",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
       "parameters": [
          {
            "name": "new_feed",
            "in": "body",
            "description": "Feed encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Feed not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/feed/tape":{
      "get": {
        "tags": [
          "Feed"
        ],
        "summary": "Get feeds in tape",
        "description": "Returns a list of feeds descriptions in set tape",
        "operationId": "getTapeFeeds",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "FirstFeed",
            "in": "query",
            "description": "Index of the first feed to be shown (from 0)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "LastFeed",
            "in": "query",
            "description": "Index of the last feed to be shown (including)",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/feed/all": {
      "get": {
        "tags": [
          "Feed"
        ],
        "summary": "Get all feeds",
        "description": "Returns a list of feeds descriptions",
        "operationId": "getAllFeeds",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/feed/{feedId}": {
      "get": {
        "tags": [
          "Feed"
        ],
        "summary": "Find feed by ID",
        "description": "Returns a feed description",
        "operationId": "getFeed",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "feedId",
            "in": "path",
            "description": "ID of feed to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Feed not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Feed"
        ],
        "summary": "Remove feed",
        "description": "Remove feed",
        "operationId": "deleteFeed",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "feedId",
            "in": "path",
            "description": "Feed id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hard",
            "in": "query",
            "description": "Hard-delete (no undo)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Feed not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/token/get": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Return access token by code",
        "description": "Make request for getting token and return result",
        "operationId": "getToken",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "URL where code was sent",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Current code for token getting request",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the client app",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OAuth"
            }
          },
          "400": {
            "description": "Invalid parameters supplied"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/token/info": {
      "get": {
        "tags": [
          "OAuth"
        ],
        "summary": "Return information about access token",
        "description": "Make request for getting information about token and return result",
        "operationId": "getTokenInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "access_token",
            "in": "query",
            "description": "Current access token for token information getting request",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the client app",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OAuth"
            }
          },
          "400": {
            "description": "Invalid parameters supplied"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/token/revoke": {
      "post": {
        "tags": [
          "OAuth"
        ],
        "summary": "Revoke access token",
        "description": "Revoke access token from both databases",
        "operationId": "revokeToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token_info",
            "in": "body",
            "description": "Current access token for token revoking request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuthRevoke"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OAuth"
            }
          },
          "400": {
            "description": "Invalid parameters supplied"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "auth_env": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "http://each.itsociety.su:5000/oauth2/authorize",
      "tokenUrl": "http://each.itsociety.su:4201/each/token/get?type=swagger",
      "scopes": {
        "email": "View your email address",
        "profile": "View your basic profile info"
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Museum": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "ownerid": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "test"
        },
        "desc": {
          "type": "string",
          "example": "great museum!"
        },
        "prop": {
          "type": "object",
          "properties": {
            "image": {
              "type": "int",
              "example": "media_id or base64 encoded string"
            }
          }
        },
        "created": {
          "type": "string",
          "example": "2018-07-18 20:24:00+00:00"
        },
        "updated": {
          "type": "string",
          "example": "2018-07-18 20:24:00+00:00"
        }
      }
    },
    "Game": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "ownerid": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "test"
        },
        "game": {
          "type": "string",
          "example": "quest params in json format"
        },
        "prop": {
          "type": "object",
          "properties": {
            "avatar": {
              "type": "int",
              "example": "media_id or base64 encoded string"
            },
            "game": {
              "type": "game",
              "example": "museum id"
            }
          }
        },
        "created": {
          "type": "string",
          "example": "2018-07-18 20:24:00+00:00"
        },
        "updated": {
          "type": "string",
          "example": "2018-07-18 20:24:00+00:00"
        }
      }
    },
    "Feed": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "object",
          "properties": {
            "RU": {
              "type": "string",
              "example": "Туристы составили рейтинг обязательных к посещению музеев Европы"
            },
            "EN": {
              "type": "string",
              "example": "Tourists made a ranking of must seen museums in Europe"
            }
          }
        },
        "desc": {
          "type": "object",
          "properties": {
            "RU": {
              "type": "string",
              "example": "В топе - два российских"
            },
            "EN": {
              "type": "string",
              "example": "Two of them are in Russia"
            }
          }
        },
        "text": {
          "type": "object",
          "properties": {
            "RU": {
              "type": "string",
              "example": "Компания SentiOne проанализировала упоминания музеев Европы в соцсетях. На основе этого эксперты составили рейтинг самых популярных выставочных залов. Больше всего упоминаний получил Лувр, а сразу за ним идёт Эрмитаж. Третьяковка оказалась на седьмом месте."
            },
            "EN": {
              "type": "string",
              "example": "The company SentiOne has analyzed some mentions about European museums in social nets. The experts made a ranking of most popular showrooms. The Louvre gained most of all mentions, the Hermitage goes right behind the Louvre. Tretyakov gallery took the seventh place."
            }
          }
        },
        "prop": {
          "type": "object",
          "properties": {
            "image": {
              "type": "int",
              "example": "media_id or base64 encoded string"
            },
            "priority": {
              "type": "int",
              "example": "from 0 to INT_MAX"
            }
          }
        },
        "created": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        },
        "updated": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        }
      }
    },
    "OAuth": {
      "type": "object",
      "required": [
        "access_token",
        "type"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "access_token": {
          "type": "string",
          "example": "ncr74RlkjTYFfyuGUjlkJO56J0"
        },
        "type": {
          "type": "string",
          "example": "each"
        },
        "name": {
          "type": "string",
          "example": "user"
        },
        "email": {
          "type": "string",
          "example": "email@m.dom"
        },
        "access_type": {
          "type": "string",
          "example": "user"
        },
        "image": {
          "type": "string",
          "example": "http://api.com/image.format"
        },
        "created": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        },
        "updated": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        }
      }
    },
    "OAuthRevoke": {
      "type": "object",
      "required": [
        "access_token",
        "type"
      ],
      "properties": {
        "access_token": {
          "type": "string",
          "example": "ncr74RlkjTYFfyuGUjlkJO56J0"
        },
        "type": {
          "type": "string",
          "example": "each"
        }
      }
    }
  },
  "externalDocs": {
      "description": "Find out more about Swagger",
       "url": "http://swagger.io"
  }
}
